---
import { getEntries } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage, githubLink, credit, liveLink, relatedPosts } = Astro.props;
const relatedEntries = await getEntries(relatedPosts || []);

---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<style lang="scss">
			.title {
				font-size: 2em;
				margin: 0.25em 0 0;
				display: flex;
				flex-direction:column;
				align-items: flex-start;
			}

			.live-link {
				border: 2px solid #fff;
				text-decoration: none;
				display: inline-flex;
				padding: 4px 16px;
				color: #000;
				background-color: #fff;
				margin-bottom: 12px;
				font-size: 16px;

				&:hover {
					background-color: transparent;
					color: #fff;
				}
			}

			hr {
				border-top: 1px solid #ddd;
				margin: 1rem 0;
			}
			.last-updated-on {
				font-style: italic;
			}
			
			img {
				width: 100%;
			}

			a {
				text-decoration: underline;
			}

			.links {
				display: flex;
				flex-direction: column;
			}


	ul {
		list-style: none;
		padding-left: 0;
		display: grid;
		grid-gap: 16px;
		grid-template-columns: repeat(3, 1fr);
	}

	li {
		border: 1px solid #fff;
		padding: 8px;
		transition: all .3s ease;

		&.disabled {
			opacity: 0.5;
			pointer-events: none;
		}

		&:hover {
			background-color: #fff;
			a {
				color: #000;
			}
		}

		img {
			padding-bottom: 16px;
			margin-bottom: auto;
			object-fit: cover;
			height: 100%;
		}

		time {
			font-size: 12px;
		}

		a {
			display: flex;
			flex-direction: column;
			transition: all .3s ease;
			text-decoration: none;
			height: 100%;
		}
	}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				{heroImage && <img src={heroImage} alt="" />}
				<small>{credit}</small>
				<h1 class="title">
					{title}
					{liveLink && <a class="live-link" href={liveLink}>See it live</a>}
				</h1>
				<FormattedDate date={pubDate} />
				{
					updatedDate && (
						<div class="last-updated-on">
							Last updated on <FormattedDate date={updatedDate} />
						</div>
					)
				}
				<div class="links">
					<a href={githubLink}>Github</a>
				</div>
				<hr />
				<slot />
			</article>
			<hr>
			<section class="related">
				<h2>RELATED POSTS</h2>
				<ul class="related__list">
					{relatedEntries.length > 0 && relatedEntries.map(post => (
						<li class={post.data.title.includes('WIP') ? 'disabled' : ''}>
							<a href={`/blog/${post.slug}/`}>
								<img src={post.data.heroImage} alt="" />
								<FormattedDate date={post.data.pubDate} />
								<div>{post.data.title}</div>
							</a>
						</li>
					))}
				</ul>
			</section>
		</main>
		<Footer />
	</body>
</html>